plugins {
    id 'java'
    // Unfortunately, in higher versions of fabric-loom, multiple submodules do not work
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'com.modrinth.minotaur' version '2.+'
}

repositories {
    mavenCentral()
    maven { url 'https://maven.wispforest.io' } // Owo config
    maven { url 'https://maven.kyrptonaught.dev' } // Custom portal api
    maven { url 'https://maven.nucleoid.xyz' } // Custom portal api transitive
}

configurations {
    // TODO Try to use those in the common module
    sharedMinecraft {
        canBeResolved = false
        assert canBeConsumed
        extendsFrom minecraft
    }
    sharedMappings {
        canBeResolved = false
        assert canBeConsumed
        extendsFrom mappings
    }
}

ext {
    minecraft = '1.19.3'
    mappings = '1.19.3+build.5'
    fabricLoader = '0.14.9'
    fabricApi = '0.72.0+1.19.3'
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft}"
    mappings "net.fabricmc:yarn:${project.mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.fabricLoader}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabricApi}"

    // Owo config
    modImplementation(annotationProcessor('io.wispforest:owo-lib:0.9.3+1.19'))
    implementation(annotationProcessor('io.wispforest:owo-lib:0.9.3+1.19'))

    // Custom portal api
    modImplementation(include('net.kyrptonaught:customportalapi:0.0.1-beta54-1.19'))
    modImplementation(include('net.kyrptonaught:cpa-polymer:1.0.0-1.19'))
    modImplementation(include('eu.pb4:polymer:0.2.18+1.19.2'))
}

loom {
    interfaceInjection {
        enableDependencyInterfaceInjection = true
    }
}

modrinth {
    projectId = 'server-portals'
    versionNumber = project.version
    versionType = project.version.contains('SNAPSHOT') ? 'alpha' : 'release'
    gameVersions = ['1.19'] // ['1.19.2']
    loaders = ['fabric']
    dependencies {
        required.project 'fabric-api'
        required.project 'owo-lib'
    }
    uploadFile = remapJar
    syncBodyFrom = rootProject.file("README.md").text

    // Use the environment variable `$MODRINTH_TOKEN` for the token
    // token = 'mySecretToken'
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

processResources {
    inputs.property 'version', project.version
    filteringCharset 'UTF-8'

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}
