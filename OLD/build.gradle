plugins {
//    id 'fabric-loom' version '1.4.4'
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'com.modrinth.minotaur' version '2.+'

    // Awesome plugin to not have to handle the boilerplate code for sourceSets and configurations yourself
    id 'com.netflix.nebula.facet' version '10.1.5'
}

allprojects {
    // This can get extracted into a root build.gradle if needed
    ext {
        getLatestTag = {
            new ByteArrayOutputStream().withStream { os ->
                exec {
                    executable = "git"
                    args = ["describe", "--tags", "--abbrev=0"]
                    standardOutput = os
                }
                return os.toString().trim()
            }
        }

        getCurrentCommitCount = {
            new ByteArrayOutputStream().withStream { os ->
                exec {
                    executable = "git"
                    args = ["rev-list", "--all", "--count"]
                    standardOutput = os
                }
                return os.toString().trim()
            }
        }
    }

//    facets {
//        v1_19 {
//            // NOTE Should be the default value
//            parentSourceSet = 'main'
//        }
//        v1_19_3 {
//            parentSourceSet = 'main'
//        }
//    }

    sourceSets {
        v1_19 {
            compileClasspath += sourceSets.main.compileClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath
        }
        v1_19_3 {
            compileClasspath += sourceSets.main.compileClasspath
            runtimeClasspath += sourceSets.main.runtimeClasspath
        }
//        v1_20 {
//            compileClasspath += sourceSets.main.compileClasspath
//            runtimeClasspath += sourceSets.main.runtimeClasspath
//        }
    }

    configurations {
        // 1.19.1
        v1_19_1Implementation.extendsFrom(implementation)
        v1_19_1ModImplementation.extendsFrom(modImplementation)
        v1_19_1Minecraft.extendsFrom(minecraft)
        v1_19_1Mappings.extendsFrom(mappings)

//        v1_19_3Implementation.extendsFrom(implementation)
//        v1_19_3ModImplementation.extendsFrom(modImplementation)
//        v1_19_3Minecraft.extendsFrom(minecraft)
//        v1_19_3Mappings.extendsFrom(mappings)
//        v1_19_3Implementation.extendsFrom(implementation)
//        v1_19_3ModImplementation.extendsFrom(modImplementation)
//        v1_19_3Minecraft.extendsFrom(minecraft)
//        v1_19_3Mappings.extendsFrom(mappings)
        v1_20Implementation.extendsFrom(implementation)
        v1_20ModImplementation.extendsFrom(modImplementation)
        v1_20Minecraft.extendsFrom(minecraft)
        v1_20Mappings.extendsFrom(mappings)
    }

    try {
        project.version = "${project.ext.getLatestTag()}-${project.ext.getCurrentCommitCount()}"
    } catch (Exception ignored) {
        println('Either git is not set up properly, or there is no tag yet in the repository. Falling back to version \'0\'')
        project.version = '0'
    }
    project.group = 'michiruf'
    project.archivesBaseName = 'server-portals'
}

task printSourceSetInformation() {
    doLast {
        sourceSets.each { srcSet ->
            println "[" + srcSet.name + "]"
            print "-->Source directories: " + srcSet.allJava.srcDirs + "\n"
            print "-->Output directories: " + srcSet.output.classesDirs.files + "\n"
            print "-->Compile classpath:\n"
            srcSet.compileClasspath.files.each {
                print "  " + it.path + "\n"
            }
            println ""
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://maven.wispforest.io' } // Owo config
    maven { url 'https://maven.kyrptonaught.dev' } // Custom portal api
    maven { url 'https://maven.nucleoid.xyz' } // Custom portal api transitive
}

dependencies {
    minecraft 'com.mojang:minecraft:1.19.3'
    mappings 'net.fabricmc:yarn:1.19.3+build.5:v2'
    modImplementation 'net.fabricmc:fabric-loader:0.14.9'
    modImplementation 'net.fabricmc.fabric-api:fabric-api:0.72.0+1.19.3'

    // Owo config
    modImplementation(annotationProcessor('io.wispforest:owo-lib:0.9.3+1.19'))
    implementation(annotationProcessor('io.wispforest:owo-lib:0.9.3+1.19'))
    //v1_19_2Implementation(v1_19_2AnnotationProcessor('io.wispforest:owo-lib:0.9.3+1.19'))
    //v1_19_3Implementation(v1_19_3AnnotationProcessor('io.wispforest:owo-lib:0.9.3+1.19'))

    // Custom portal api
    modImplementation(include('net.kyrptonaught:customportalapi:0.0.1-beta54-1.19'))
    modImplementation(include('net.kyrptonaught:cpa-polymer:1.0.0-1.19'))
    modImplementation(include('eu.pb4:polymer:0.2.18+1.19.2'))

    // Version specific minecraft
}

modrinth {
    projectId = 'server-portals'
    versionNumber = project.version
    versionType = project.version.contains('SNAPSHOT') ? 'alpha' : 'release'
    gameVersions = ['1.19'] // ['1.19.2']
    loaders = ['fabric']
    dependencies {
        required.project 'fabric-api'
        required.project 'owo-lib'
    }
    uploadFile = remapJar
    syncBodyFrom = rootProject.file("README.md").text

    // Use the environment variable `$MODRINTH_TOKEN` for the token
    // token = 'mySecretToken'
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

processResources {
    inputs.property 'version', project.version
    filteringCharset 'UTF-8'

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}
