import de.michiruf.gradle.findversion.FindVersion

plugins {
    id 'java'
    // Unfortunately, in higher versions of fabric-loom, multiple submodules do not work
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'com.modrinth.minotaur' version '2.+'
}

repositories {
    mavenCentral()
    maven { url 'https://maven.wispforest.io' } // Owo config
    maven { url 'https://maven.kyrptonaught.dev' } // Custom portal api
    maven { url 'https://maven.nucleoid.xyz' } // Custom portal api transitive
}

// Check minecraft, mappings, fabric and fabricApi on: https://modmuss50.me/fabric.html
def minecraftVersionDefinitions = [
        '1.19': [
                minecraft        : '1.19',
                mappings         : '1.19+build.4',
                fabric           : '0.15.0',
                fabricApi        : '0.58.0+1.19',
                supportedVersions: ['1.19']
        ],
        '1.19.1': [
                minecraft        : '1.19.1',
                mappings         : '1.19.1+build.6',
                fabric           : '0.15.0',
                fabricApi        : '0.58.5+1.19.1',
                supportedVersions: ['1.19.1']
        ],
        '1.19.2': [
                minecraft        : '1.19.2',
                mappings         : '1.19.2+build.28',
                fabric           : '0.15.0',
                fabricApi        : '0.77.0+1.19.2',
                supportedVersions: ['1.19.2']
        ],
        '1.19.3': [
                minecraft        : '1.19.3',
                mappings         : '1.19.3+build.5',
                fabric           : '0.15.0',
                fabricApi        : '0.76.1+1.19.3',
                supportedVersions: ['1.19.3']
        ]
]
var minecraftVersion = '1.19';
var minecraftVersionDefinition = minecraftVersionDefinitions[minecraftVersion]

sourceSets {
    main {
        java {
            srcDirs = [
                    'src/main/java',
                    "src/registry/${FindVersion.findClosestLowerOrEqualVersionInDirectory(file('src/registry'), minecraftVersion)}",
                    "src/message/${FindVersion.findClosestLowerOrEqualVersionInDirectory(file('src/message'), minecraftVersion)}"
            ]
        }
    }
}

dependencies {
    // Minecraft and fabric
    minecraft "com.mojang:minecraft:${minecraftVersionDefinition['minecraft']}"
    mappings "net.fabricmc:yarn:${minecraftVersionDefinition['mappings']}:v2"
    modImplementation "net.fabricmc:fabric-loader:${minecraftVersionDefinition['fabric']}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${minecraftVersionDefinition['fabricApi']}"

    // Owo config
    modImplementation(annotationProcessor('io.wispforest:owo-lib:0.9.3+1.19'))
    implementation(annotationProcessor('io.wispforest:owo-lib:0.9.3+1.19'))
    // Custom portal api
    modImplementation(include('net.kyrptonaught:customportalapi:0.0.1-beta54-1.19'))
    modImplementation(include('net.kyrptonaught:cpa-polymer:1.0.0-1.19'))
    modImplementation(include('eu.pb4:polymer:0.2.18+1.19.2'))
}

loom {
    interfaceInjection {
        enableDependencyInterfaceInjection = true
    }
}

modrinth {
    projectId = rootProject.name
    versionNumber = project.version
    versionType = project.version.contains('SNAPSHOT') ? 'alpha' : 'release'
    gameVersions = minecraftVersionDefinition['supportedVersions']
    loaders = ['fabric']
    dependencies {
        required.project 'fabric-api'
        required.project 'owo-lib'
    }
    uploadFile = remapJar
    syncBodyFrom = rootProject.file("README.md").text

    // Use the environment variable `$MODRINTH_TOKEN` for the token
    // token = 'mySecretToken'
}
tasks.modrinth.dependsOn(tasks.modrinthSyncBody)

processResources {
    inputs.property 'version', project.version
    filteringCharset 'UTF-8'

    filesMatching('fabric.mod.json') {
        expand 'version': project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}
